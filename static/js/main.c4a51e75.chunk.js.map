{"version":3,"sources":["Scripts/Weather.js","Components/LocationEntry.jsx","Stylesheets/WeatherCard.js","Components/WeatherCard.jsx","Components/Header.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["axios","require","config","Weather","getWeatherData","city","a","url","process","console","log","data","LocationEntry","onUpdate","TextField","autoFocus","label","onBlur","ev","target","value","onKeyDown","key","makeStyles","root","display","flexDirection","backgroundColor","borderRadius","boxShadow","width","margin","padding","content","flex","CityDisplay","props","Typography","align","variant","color","location","country","WeatherDisplay","weatherData","undefined","main","iconURL","JSON","stringify","weather","icon","replace","name","sys","style","sx","maxWidth","Math","trunc","gutterBottom","float","marginTop","src","path","WeatherCard","canDelete","onDelete","classes","useStyles","React","useState","setWeatherData","useEffect","then","response","Card","className","CardContent","CardActions","Button","disabled","onClick","size","Header","state","onChange","e","setState","textAlign","paddingTop","fontSize","component","flexGrow","Component","LOCAL_STORAGE_KEY","App","locations","storedLocations","localStorage","getItem","parse","readFromLocal","weatherLocations","setWeatherLocations","updateLocations","setItem","saveToLocalStorage","removeAtIndex","index","filter","_","locationIndex","updateAtIndex","updatedLocation","map","canAddOrRemove","useMemo","every","height","id","flexWrap","marginLeft","marginRight","item","Fab","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4a51e75.chunk.js","sourcesContent":["const axios = require(\"axios\");\r\n\r\nrequire('dotenv').config();\r\n\r\nconst baseUrl = \"https://api.openweathermap.org/data/2.5/weather\";\r\n\r\nclass Weather{\r\n\r\n      /**\r\n     * Gets the weather data based on the zipcode and which temp system to converge to (imperial/metric system)\r\n     *\r\n     * \r\n     * @param {string} city This is either \"imperial\" (use Fahrenheit) or \"metric\" (use Celsius)\r\n     * @return {JSON} The data response from the weather api call.\r\n     */\r\n\r\n    getWeatherData = async (city) => {\r\n        let url = `${baseUrl}?q=${city}&units=metric&appid=${process.env.REACT_APP_API_KEY}`\r\n        console.log(process.env);\r\n        return (await axios(url)).data;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nfunction LocationEntry({ onUpdate }) {\r\n    const handleBlur = ev => onUpdate(ev.target.value);\r\n\r\n    const handleKeyDown = ev => {\r\n        if (ev.key === \"Enter\") {\r\n            onUpdate(ev.target.value);\r\n        }\r\n    };\r\n\r\n    return <TextField autoFocus label=\"Enter location\" onBlur={handleBlur} onKeyDown={handleKeyDown} />;\r\n}\r\n\r\nLocationEntry.propTypes = {\r\n    onUpdate: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default LocationEntry;","import {makeStyles} from \"@mui/styles\"\r\n\r\nexport default makeStyles(()=>({\r\n    root: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        backgroundColor: '#EBF5FC',\r\n        borderRadius:'30px',\r\n        boxShadow : '-6px -6px 20px rgba(255,255,255,1), 6px 6px 20px rgba(0,0,0,0.1)',\r\n        width:'250px',\r\n        margin:'20px',\r\n        padding:'10px'\r\n    },  \r\n    content: { flex: 1 },\r\n\r\n}))","import React from \"react\";\r\nimport Weather from \"../Scripts/Weather\"\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\nimport LocationEntry from \"./LocationEntry\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport Button from \"@mui/material/Button\";\r\nimport CardMedia from '@mui/material/CardMedia'; \r\nimport { borderRadius } from \"@mui/system\";\r\nimport useStyles from \"./../Stylesheets/WeatherCard\"\r\nrequire('dotenv').config({path: \"./../../../.env\"});\r\n\r\n\r\nfunction CityDisplay(props){\r\n    return(\r\n    <Typography align = \"left\" variant=\"h6\" color=\"text.secondary\">\r\n        {props.location}, {props.country}\r\n    </Typography>\r\n    );    \r\n}\r\n\r\n\r\n\r\nfunction WeatherDisplay({weatherData}){\r\n\r\n    if(weatherData.main !== undefined){\r\n        var iconURL = \"https://openweathermap.org/img/wn/\" + JSON.stringify(weatherData.weather[0].icon).replace(/['\"]+/g, '') + \"@2x.png\";\r\n        return(\r\n         <>\r\n         <CityDisplay location = {weatherData.name} country={weatherData.sys.country}/> \r\n         <div style={{display:\"flex\"}}>\r\n            <div style={{width:\"80%\"}}>\r\n                <Typography sx={{ maxWidth: 200 }} align = \"left\" variant=\"h3\" color=\"text.secondary\">\r\n                    {Math.trunc(JSON.stringify(weatherData.main['temp']))}Â°C\r\n                </Typography>\r\n                <Typography sx={{ maxWidth: 200 }} align = \"left\" variant=\"h5\" color=\"text.secondary\" gutterBottom>\r\n                    {JSON.stringify(weatherData.weather[0].main).replace(/['\"]+/g, '')} \r\n                </Typography>\r\n                <Typography sx={{ maxWidth: 200 }} align = \"left\" variant=\"body2\" color=\"text.secondary\">\r\n                    Humidity {Math.trunc(JSON.stringify(weatherData.main['humidity']))} %\r\n                </Typography>\r\n            </div> \r\n            <div style={{float:\"right\", marginTop:\"-15px\"}}>\r\n                <img src={iconURL}></img>\r\n            </div>\r\n        </div>\r\n        </>  \r\n        );  \r\n    }\r\n    else{\r\n        return(\r\n        <Typography sx={{ maxWidth: 100 }} align = \"left\" variant=\"h3\" color=\"text.secondary\" gutterBottom>\r\n            29F\r\n        </Typography>\r\n        );      \r\n    }\r\n     \r\n}\r\n\r\n\r\n\r\nfunction WeatherCard({ location, canDelete, onDelete, onUpdate }){\r\n    const classes = useStyles();\r\n    const [weatherData, setWeatherData] = React.useState({});\r\n    React.useEffect(() => {\r\n        const weatherObj = new Weather();\r\n        const weatherPromise = weatherObj.getWeatherData(location); \r\n        weatherPromise.then(response=>{\r\n            return response;\r\n        }).then(data=>setWeatherData(data))\r\n    }, [location]);\r\n    \r\n    return(\r\n        <>\r\n            <Card className={classes.root} >\r\n            <CardContent className={classes.content} >\r\n                {!location && <LocationEntry onUpdate={onUpdate} />}\r\n                \r\n                {location && <WeatherDisplay weatherData = {weatherData}/>}    \r\n            </CardContent> \r\n            <CardActions>\r\n                <Button disabled={!canDelete} onClick={onDelete} size=\"small\" color=\"primary\">\r\n                    Remove\r\n                </Button>\r\n            </CardActions>\r\n         </Card>  \r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default WeatherCard;","import React, {Component} from \"react\";\r\nimport { AppBar } from \"@mui/material\";\r\nimport { Typography } from \"@mui/material\";\r\n\r\nclass Header extends Component {\r\n    // default state values\r\n    state = {\r\n        city: \"Chennai\",\r\n        \r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Typography style={{textAlign:\"center\", paddingTop:\"2%\", fontSize:\"20px\"}} variant=\"overline\" color=\"text.secondary\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n                    ZenWeather\r\n                </Typography>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","\r\nimport React, {Component} from 'react';\r\nimport './Stylesheets/App.css';\r\nimport Weather from \"./Scripts/Weather.js\"\r\nimport WeatherCard from \"./Components/WeatherCard.jsx\"\r\nimport Header from \"./Components/Header.jsx\"\r\nimport Button from '@mui/material/Button';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\nimport Fab from '@mui/material/Fab';\r\nimport Grid from '@mui/material/Grid';\r\nimport AddIcon from \"@mui/icons-material/Add\"\r\n\r\n\r\nconst LOCAL_STORAGE_KEY = 'cityLocations';\r\n\r\nfunction saveToLocalStorage(locations){\r\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(locations));\r\n}\r\n\r\nfunction readFromLocal(locations){\r\n  const storedLocations = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n  return storedLocations ? JSON.parse(storedLocations) : [];\r\n}\r\nfunction App () { \r\n  \r\n  const [weatherLocations, setWeatherLocations] = React.useState(readFromLocal());\r\n\r\n  const handleAddClick = ()=>{\r\n    setWeatherLocations([...weatherLocations, \"\"]);  \r\n  }\r\n\r\n  \r\n  const updateLocations = locations => {\r\n    setWeatherLocations(locations);\r\n    saveToLocalStorage(locations);\r\n};\r\n\r\nconst removeAtIndex = index => () =>\r\n    updateLocations(weatherLocations.filter((_, locationIndex) => locationIndex !== index));\r\n\r\nconst updateAtIndex = index => updatedLocation =>\r\n    updateLocations(\r\n        weatherLocations.map((location, locationIndex) => (locationIndex === index ? updatedLocation : location)),\r\n    );\r\n\r\nconst canAddOrRemove = React.useMemo(() => weatherLocations.every(location => location !== \"\"), [weatherLocations]);\r\n    return (\r\n        <div className=\"App\">\r\n          <Header></Header>\r\n          <span style={{height:\"10px\", display:'block'}}></span>\r\n          <div id=\"container\" style={{display:\"flex\", flexDirection:\"row\", flexWrap:\"wrap\", marginLeft:\"8%\", marginRight:\"0%\"}}>\r\n          {weatherLocations.map((location, index) => (\r\n                    <div key={location} item>\r\n                        <WeatherCard\r\n                            location={location}\r\n                            canDelete={!location || canAddOrRemove}\r\n                            onDelete={removeAtIndex(index)}\r\n                            onUpdate={updateAtIndex(index)}\r\n                        />\r\n                    </div>\r\n                ))}\r\n        </div>\r\n          <Fab\r\n                onClick={handleAddClick}\r\n                aria-label=\"add weather location\"\r\n\r\n                color=\"primary\"\r\n            >\r\n             <AddIcon/> \r\n            </Fab>\r\n        </div>\r\n    );\r\n  \r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}